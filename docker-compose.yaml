services:
  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"

  storage:
    image: quay.io/minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_PORT}:9000" # S3 API
      - "${MINIO_UI_PORT}:9001" # Web UI
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Separate container to configure `storage` service (minio) by creating a bucket. the CLI tool `mc` inside the image can work cross container
  storage_init:
    image: quay.io/minio/minio:latest
    depends_on:
      storage:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        mc alias set local http://storage:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
        mc mb local/${MINIO_BUCKET_NAME}
      "

  db_test:
    image: postgres:latest
    container_name: db_test
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db
    ports:
      - 5431:5432

volumes:
  postgres_data:
    driver: local
  minio_data:
